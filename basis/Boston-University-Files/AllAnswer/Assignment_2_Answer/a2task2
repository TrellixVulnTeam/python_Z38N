Task2: Thinking recursively

def mystery(a, b):
    if a * b == 0:
        return a
    else:
        myst_rest = mystery(a - 1, b - 2)
        return b + myst_rest

1,2 - - * * * * * * - - 1,2

mystery(5, 6)                     ↓                      value   =   14
myst_rest1 = mystery(4, 4)       ↓      6 + myst_rest1      ↑     6 + 4 + 2 + 2
myst_rest2 = mystery(3, 2)      ↓      4 + myst_rest2      ↑     4 + 2 + 2
myst_rest3 = mystery(2, 0)     ↓      2 + myst_rest3      ↑    2 + 2
return 2                             2                    ↑

1,2 - - * * * * * * - - 1,2

3 - - * * * * * * - - 3
        |        2        |    removed first
        |2 + mystery(2, 0)|            second
stack : |4 + mystery(3, 2)|            ...
        |6 + mystery(4, 4)|            ...
        |  mystery(5, 6)  |            end

recursive = mystery(5, 6)[ 6 + mystery(4, 4)[ 4 + mystery(3, 2)[ 2 + mystery(2, 0)[ 2 ] ] ] ]

(global scope)
a | b
- - - -
5   6             infinite recursive example : mystery(a < 0, 奇数)
4   4             a and b will never appear 0
3   2
2   0
3 - - * * * * * * - - 3


