"""
PyEdit(textEditor.py)用户启动配置模块
"""
##########################################################################
# 常规配置
# 也可以从GUI菜单改变字体或颜色，当窗口打开时可调整大小
# 通过搜索路径输入: 可由客户端应用程序进来定义，如果不在搜索路径上则跳过
##########################################################################

# 最初的字体
font = ('courier', 9, 'normal')    # 字族，大小，字体
# 最初的颜色
bg = 'lightcyan'                   # 默认 = 白色，黑色
fg = 'black'                       # 色名表示法或红绿蓝表示法(RGB)或十六进制表示法#69of96
# 最初大小
height = 20                        # Tk 默认高度为: 24行
width = 80                         # Tk 默认狂赌为: 80字符
# 区分大小写的搜索
caseinsens = True                 # 默认 = 1/True(正使用)

##########################################################################
# Unicode编码行为，以及打开和保存文件进行命名
# 按以下所列的顺序尝试这些情况,直到第一个开始运行
# 为使用你自己平台的默认值,将所有的变量设置为 0/ ''/False
# Windows系统默认utf-8，Unix系统是ascii或latin-1
# savesUseKnownEncoding中0为"否"，1为"是"表示仅保存，2为"是"表示保存和另存为
# 总是从这个文件导入: 如为主函数则是sys.path，否则相应包
##########################################################################

                            # 1) 尝试内部熟知的第一种类型(如: 电子邮件字符集)
opensAskUser = True        # 2) 如果为真，下一步尝试用户输入(用默认设置来预先填充)
opensEncoding = ''          # 3) 如果非空，下一步尝试这些编码: "latin-1", "cp500"
                            # 4) 下一步尝试平台默认的 sys.getdefaultencoding()
                            # 5) 最后使用二进制模式的字节和Tk策略

savesUseKnownEncoding = 1   # 1) 如果大于0，从上一次打开或保存的已知编码尝试
savesAskUser = True        # 2) 如果为真，下一步尝试用户输入(用已知的?来预先填充)
savesEncoding = ''          # 3) 如果非空，下一步尝试这些编码: "utf-8" 等
                            # 4) 最后尝试使用 sys.getdefaultencoding()
